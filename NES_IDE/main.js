/*
catch errors coming from opening a project that does not exist
*/

// 'use strict'

const assemblerSource = './nesasm-master/source/';
const assemblerPath = './nesasm-master/nesasm';
const emulatorPath = 'fceux'; //installed program name

const fs = require('fs');

const express = require('express');
const bodyParser = require('body-parser');
const app = express();

var checkedOutProjectName = null;
var savedata = null;
initServer();

// app.use(bodyParser.urlencoded({ extended: false }));
// app.use(bodyParser.json());
app.use(express.static('public'));
app.use(bodyParser.json({limit: '10mb'}));
app.use(bodyParser.urlencoded({limit: '10mb', extended: true}));

app.get('/', async (req, res) => {
    
});
app.post('/', async (req, res) => {
    console.log("webpage load");
    checkedOutProjectName = null;
    savedata = null;
    res.send({projectstatus: "clear"});
});
app.post('/newproject', async (req, res) => {
    var callsRemaining = 6;
    var returnData = {};

    var requestProjectName = req.body.name;
    checkedOutProjectName = requestProjectName;

    //MUST wait for this to finish creating all files
    newProject(requestProjectName, function(clientMessage){
        transcribePalServerToClient(function(response){
            returnData["backgroundPalette"] = response.background;
            returnData["spritePalette"] = response.sprite;
            callsRemaining -= 1;
            if (callsRemaining <= 0){
                res.send(returnData);
            }
        });
        transcribeTxtServerToClient(function(response){
            returnData["code"] = response.code;
            callsRemaining -= 1;
            if (callsRemaining <= 0){
                res.send(returnData);
            }
        });
        transcribeSprServerToClient(function(response){
            returnData["sprites"] = response.sprites;
            callsRemaining -= 1;
            if (callsRemaining <= 0){
                res.send(returnData);
            }
        });
        transcribeBkgServerToClient(function(response){
            returnData["backgrounds"] = response.backgrounds;
            callsRemaining -= 1;
            if (callsRemaining <= 0){
                res.send(returnData);
            }
        })
        transcribeSprPalPairsServerToClient(function(response){
            returnData["sprPalPairs"] = response.sprPalPairs;
            callsRemaining -= 1;
            if (callsRemaining <= 0){
                res.send(returnData);
            }
        });
        transcribeBkgPalPairsServerToClient(function(response){
            returnData["bkgPalPairs"] = response.bkgPalPairs;
            callsRemaining -= 1;
            if (callsRemaining <= 0){
                res.send(returnData);
            }
        });
    });
});
app.post('/closeproject', async (req, res) => {
    checkedOutProjectName = null;
});
app.post('/openproject', async (req, res) => {
    var callsRemaining = 6;
    var returnData = {};

    var requestProjectName = req.body.name;
    checkedOutProjectName = requestProjectName;
    
    transcribePalServerToClient(function(response){
        returnData["backgroundPalette"] = response.background;
        returnData["spritePalette"] = response.sprite;
        callsRemaining -= 1;
        if (callsRemaining <= 0){
            res.send(returnData);
        }
    });
    transcribeTxtServerToClient(function(response){
        returnData["code"] = response.code;
        callsRemaining -= 1;
        if (callsRemaining <= 0){
            res.send(returnData);
        }
    });
    transcribeSprServerToClient(function(response){
        returnData["sprites"] = response.sprites;
        callsRemaining -= 1;
        if (callsRemaining <= 0){
            res.send(returnData);
        }
    });
    transcribeBkgServerToClient(function(response){
        returnData["backgrounds"] = response.backgrounds;
        callsRemaining -= 1;
        if (callsRemaining <= 0){
            res.send(returnData);
        }
    });
    transcribeSprPalPairsServerToClient(function(response){
        returnData["sprPalPairs"] = response.sprPalPairs;
        callsRemaining -= 1;
        if (callsRemaining <= 0){
            res.send(returnData);
        }
    });
    transcribeBkgPalPairsServerToClient(function(response){
        returnData["bkgPalPairs"] = response.bkgPalPairs;
        callsRemaining -= 1;
        if (callsRemaining <= 0){
            res.send(returnData);
        }
    });
});
app.post('/saveproject', async (req, res) => {
    if (checkedOutProjectName === null){
        res.send({savedataresponse: "A project must be opened first"});
    }
    else{
        if (req.body.savedata !== undefined && req.body.confirmation === undefined){
            savedata = req.body.savedata;
            res.send({savedataresponse: savedata});
        }
        if (req.body.savedata === undefined && req.body.confirmation !== undefined){
            if (req.body.confirmation === 'good'){
                //attempt to write data to save
                console.log("Saving data since confirmed good");
    
                var callsRemaining = 6;
                var returnData = {confirmationresponse: "saved"};
    
                transcribePalClientToServer(function(response){
                    callsRemaining -= 1;
                    if (callsRemaining <= 0){
                        res.send(returnData);
                    }
                });
                transcribeTxtClientToServer(function(response){
                    callsRemaining -= 1;
                    if (callsRemaining <= 0){
                        res.send(returnData);
                    }
                });
                transcribeSprClientToServer(function(response){
                    callsRemaining -= 1;
                    if (callsRemaining <= 0){
                        res.send(returnData);
                    }
                });
                transcribeBkgClientToServer(function(response){
                    callsRemaining -= 1;
                    if (callsRemaining <= 0){
                        res.send(returnData);
                    }
                });
                transcribeSprPalPairsClientToServer(function(response){
                    callsRemaining -= 1;
                    if (callsRemaining <= 0){
                        res.send(returnData);
                    }
                });
                transcribeBkgPalPairsClientToServer(function(response){
                    callsRemaining -= 1;
                    if (callsRemaining <= 0){
                        res.send(returnData);
                    }
                });
    
                //catch error
                // res.send({confirmationresponse: "unsaved"});
            }
            else if (req.body.confirmation === 'bad') {
                console.log("Not saving data since not confirmed good");
                res.send({confirmationresponse: "unsaved"});
            }
        }
    }
});
app.post('/runproject', async (req, res) => {
    if (checkedOutProjectName === null){
        res.send({response: "A project must be opened first"});
    }
    else
    {
        const {exec} = require('child_process');
        // var assembleCommand = './nesasm-master/nesasm ./projects/' + checkedOutProjectName + '/code.s';
        var assembleCommand = assemblerPath + ' ./projects/' + checkedOutProjectName + '/code.s';
        // var emulatorCommand = 'fceux ./projects/' + checkedOutProjectName + '/code.nes';
        var emulatorCommand = emulatorPath + ' ./projects/' + checkedOutProjectName + '/code.nes';
        exec(assembleCommand, (err, stdout, stderr) => {
            console.log(err);
            console.log(stdout);
            console.log(stderr);
            exec(emulatorCommand, (err, stdout, stderr) => {

            });
        });

        res.send({response: "good"});
    }
});

app.use((req, res) => {
    res.status(404).send(`<h2>Uh Oh!</h2><p>Sorry ${req.url} cannot be found here</p>`);
});
app.listen(11111, () => console.log('The server is up and running on port 11111...'));




///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////SERVER FUNCTIONS///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

function initServer(){
    const {exec} = require('child_process');
    // exec('make clean -C ./nesasm-master/source/', (err, stdout, stderr) => {
    //     console.log("cleaned nesasm-master");
    //     exec('make -C ./nesasm-master/source/', (err, stdout, stderr) => {
    //         console.log("made nesasm-master");
    //     });
    // });
    var makeCommand = 'make -C ' + assemblerSource;
    exec(makeCommand, (err, stdout, stderr) => {
        console.log("made nesasm-master");
    });

    fs.mkdir('./projects/', 0777, function(err){
        if (err){
            handleInitServerException(err);
        }
    });
}

function newProject(projectDir, cb){
    var clientMessage = {condition: true, message: "New Project Created Successfully"};
    fs.mkdir('./projects/' + projectDir, 0777, function(err){
        if (err){
            handleNewProjectDirectoryException(err, projectDir, null, clientMessage);
            cb(clientMessage);
        } else{
            var filesRemaining = 6;
            //write file overwrites files by default
            fs.writeFile('./projects/' + projectDir + '/code.s', 'enter code here', function(err){
                if (err){
                    handleNewProjectFileException(err, projectDir, 'code.s', clientMessage);
                } else {
                    console.log("created code file for project: " + projectDir);

                    //START
                    const {exec} = require('child_process');
                    var cpCommand = 'cp ./projects/defaultcodefile.txt ' + './projects/' + checkedOutProjectName + '/code.s';
                    exec(cpCommand, (err, stdout, stderr) => {
                        console.log(err);
                        console.log(stdout);
                        console.log(stderr);

                        var wcCommand = 'wc -c < ./projects/' + checkedOutProjectName + '/code.s';
                        var waitInterval = setInterval(function(){
                            exec(wcCommand, (err, stdout, stderr) => {
                                console.log(stdout);
                                if (parseInt(stdout) > 17){
                                    clearInterval(waitInterval);
                                    filesRemaining -= 1;
                                    if (filesRemaining === 0){
                                        cb(clientMessage);
                                    }
                                }
                            });
                        }, 500);
                    });
                }
            });
            var defaultPalette = Buffer.from(`0001020300111213002122230031323300010203001112130021222300313233`, "hex"); //left half for background right half for sprite
            // var defaultPalette = Buffer.from('0001010100010101000101010001010100010203001112130021222300313233', 'hex'); //left half for background right half for sprite            
            fs.writeFile('./projects/' + projectDir + '/palette.pal', defaultPalette, function(err){
                if (err){
                    handleNewProjectFileException(err, projectDir, 'palette.pal', clientMessage);
                } else {
                    console.log("created palette file for project: " + projectDir);
                }
                filesRemaining -= 1;
                if (filesRemaining === 0){
                    cb(clientMessage);
                }
            });
            var defaultSprites = Buffer.from('a0000000000000006000000000000000ff00ff000000000000ffffff0000000000000000', 'hex');
            // var defaultSprites = Buffer.from('', 'hex');
            fs.writeFile('./projects/' + projectDir + '/sprite.spr', defaultSprites, function(err){
                if (err){
                    handleNewProjectFileException(err, projectDir, 'sprite.spr', clientMessage);
                } else {
                    console.log("creted sprite file for project: " + projectDir);
                }
                filesRemaining -= 1;
                if (filesRemaining === 0){
                    cb(clientMessage);
                }
            });
            var defaultBackgrounds = Buffer.from('', 'hex');
            // var defaultBackgrounds = Buffer.from('', 'hex');
            fs.writeFile('./projects/' + projectDir + '/background.bkg', defaultBackgrounds, function(err){
                if (err){
                    handleNewProjectFileException(err, projectDir, 'background.bkg', clientMessage);
                } else {
                    console.log("created background file for project: " + projectDir);
                }
                filesRemaining -= 1;
                if (filesRemaining === 0){
                    cb(clientMessage);
                }
            });
            var defaultSpritePalettePairs = '0123000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
            fs.writeFile('./projects/' + projectDir + '/spritePalettePairs.txt', defaultSpritePalettePairs, function(err){
                if (err){
                    handleNewProjectFileException(err, projectDir, 'spritePalettePairs.txt', clientMessage);
                } else {
                    console.log("created sprite palette pairs file for project: " + projectDir);
                }
                filesRemaining -= 1;
                if (filesRemaining === 0){
                    cb(clientMessage);
                }
            });
            var backgroundPalettePairs = '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
            fs.writeFile('./projects/' + projectDir + '/backgroundPalettePairs.txt', backgroundPalettePairs, function(err){
                if (err){
                    handleNewProjectFileException(err, projectDir, 'backgroundPalettePairs.txt', clientMessage);
                } else {
                    console.log("created background palette pairs file for project: " + projectDir);
                }
                filesRemaining -= 1;
                if (filesRemaining === 0){
                    cb(clientMessage);
                }
            });
        }
    });
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////EXCEPTION HANDLERS///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
//https://github.com/nodejs/help/issues/882
//https://nodejs.org/api/errors.html#errors_common_system_errors

function handleInitServerException(err, clientMessage){
    console.log("handleInitServerException Triggered");
    if (err.code === "EEXIST"){
        console.log("projects folder already exists - ignoring creation");
    } else if (err.code === "EACCES"){
        clientMessage.condition = false;
        clientMessage.message = "Permission denied when initializing server";
        console.log("Permission denied when initializing server");
    } else {
        clientMessage.condition = false;
        clientMessage.message = "Unexpected error encountered when initializing server";
        throw err;
    }
    console.log("\n");
}

function handleNewProjectDirectoryException(err, projectDir, dir, clientMessage){
    console.log("handleNewProjectDirectoryException Triggered");
    if (err.code === "EEXIST"){
        console.log("Given project name: " + projectDir + " already exists so new project could not be saved");
        clientMessage.condition = false;
        clientMessage.message = "Given project name already exists. New project could not created";
    } else {
        clientMessage.condition = false;
        clientMessage.message = "Unexpected error encountered when creating new project directory";
        throw err;
    }
    console.log("\n");
}

function handleNewProjectFileException(err, projectDir, file, clientMessage){
    console.log("handleNewProjectFileException Triggered");
    if (err.code === "EEXIST"){
        console.log("Given file name: " + file + " already exists for project: " + projectDir + " so new project could not created");
        clientMessage.condition = false;
        clientMessage.message = "Given file name: " + file + " already exists for project: " + projectDir + " so new project could not created";
    } else{
        clientMessage.condition = false;
        clientMessage.message = "Unexpected error encountered when creating files for new project";
        throw err;
    }
    console.log("\n");
}

function handleOpenProjectException(err, projectDir, file, clientMessage){
    console.log("handleOpenProjectException Triggered");
    if (err.code === "ENOENT"){
        console.log("could not read file: " + file + " in project: " + projectDir);
        clientMessage.condition = false;
        clientMessage.message = "Could not read file: " + file;
    } else {
        clientMessage.condition = false;
        clientMessage.message = "Unexpected error encountered when opening project";
        throw err;
    }
    console.log("\n");
}

function handleSaveProjectException(err, projectDir, clientMessage){
    console.log("handleSaveProjectException Triggered");
    console.log("could not save project: " + projectDir);
    console.log("\n");
    clientMessage.condition = false;
    clientMessage.message = "Unexpected error encountered when saving project";
    throw err;
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////HELPER FUNCTIONS////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
async function transcribePalServerToClient(cb){
    fs.readFile('./projects/' + checkedOutProjectName + '/palette.pal', {encoding: 'hex'}, function(err, data){
        var palArray = data.match(/.{1,2}/g);
        var pal = {background: [], sprite: []};
        var backgroundPalArray = [];
        var spritePalArray = [];
        var indicesToUse = [0,1,2,3,5,6,7,9,10,11,13,14,15];
        for (var i = 0; i < 2; i++){
            for (var j = 0; j < palArray.length / 2; j++){
                if (i === 0){
                    if (indicesToUse.indexOf(j) > -1){
                        backgroundPalArray.push("0x" + palArray[j]);
                    }
                }
                else if (i === 1){
                    if (indicesToUse.indexOf(j) > -1){
                        spritePalArray.push("0x" + palArray[j + (palArray.length / 2)]);
                    }
                }
            }
        }
        pal.background = backgroundPalArray;
        pal.sprite = spritePalArray;

        cb(pal);
    });
}

function transcribePalClientToServer(cb){
    var backgroundPaletteCopy = savedata.backgroundPalette.slice();
    var spritePaletteCopy = savedata.spritePalette.slice();

    //remove first element - universal color and store it
    var universalColor = backgroundPaletteCopy.shift().substr(2, 2);
    spritePaletteCopy.shift();

    var cleanedBackgroundPalette = [];
    var cleanedSpritePalette = [];

    //go through both the backgroundPalette and spritePalette client data and take away the 0x prefix
    for (var i = 0; i < backgroundPaletteCopy.length; i++){
        var strippedBackgroundColor = backgroundPaletteCopy[i].substr(2, 2);
        var strippedSpriteColor = spritePaletteCopy[i].substr(2, 2);

        if (i % 3 === 0){
            cleanedBackgroundPalette.push(universalColor);
            cleanedSpritePalette.push(universalColor);    
        }

        cleanedBackgroundPalette.push(strippedBackgroundColor);
        cleanedSpritePalette.push(strippedSpriteColor);
    }

    //get a string version of the array data to use a hex buffer to write to the files
    var paletteData = Buffer.from(cleanedBackgroundPalette.join('') + cleanedSpritePalette.join(''), 'hex');

    fs.writeFile('./projects/' + checkedOutProjectName + '/palette.pal', paletteData, function(err){
        cb("retval");
    });
}

function transcribeSprServerToClient(cb){
    fs.readFile('./projects/' + checkedOutProjectName + '/sprite.spr', {encoding: 'hex'}, function(err, data){
        var spriteArray = data.match(/.{1,32}/g);
        var sprites = [];
        
        //create 256 sub arrays for the sprite tiles
        for (var i = 0; i < 256; i++){
            sprites.push(new Array());
        }

        for (var i = 0; i < spriteArray.length; i++){
            for (var j = 0; j < spriteArray[i].length / 2; j += 2){
                //set 1st half with 2nd half respective data
                var leftHalf = spriteArray[i].substring(j, j + 2);
                var rightHalf = spriteArray[i].substring(j + 16, j + 16 + 2);

                //convert hex strings to binary
                var leftHalfBinary = ("00000000" + (parseInt(leftHalf, 16)).toString(2)).substr(-8);
                var rightHalfBinary = ("00000000" + (parseInt(rightHalf, 16)).toString(2)).substr(-8);

                //compare binary bits and generate color numbers
                for (var k = 0; k < leftHalfBinary.length; k++){
                    if (leftHalfBinary[k] === '0' && rightHalfBinary[k] === '0'){
                        // sprites.push(0);
                        sprites[i % 256].push('0');
                    }
                    else if (leftHalfBinary[k] === '1' && rightHalfBinary[k] === '0'){
                        // console.log("1: " + leftHalfBinary + " " + rightHalfBinary);
                        // sprites.push(1);
                        sprites[i % 256].push('1');
                    }
                    else if (leftHalfBinary[k] === '0' && rightHalfBinary[k] === '1'){
                        // console.log("2: " + leftHalfBinary + " " + rightHalfBinary);
                        // sprites.push(2);
                        sprites[i % 256].push('2');
                    }
                    else if (leftHalfBinary[k] === '1' && rightHalfBinary[k] === '1'){
                        // console.log("3: " + leftHalfBinary + " " + rightHalfBinary);
                        // sprites.push(3);
                        sprites[i % 256].push('3');
                    }
                }
            }
        }
        cb({sprites: sprites});
    });
}

function transcribeSprClientToServer(cb){
    var spritesCopy = savedata.sprites;

    var hexData = new Array(4096);
    var hexDataCounter = 0;
    var rowCounter = 0;
    for (var i = 0; i < spritesCopy.length; i++){ //read each tile once
        for (var j = 0; j < spritesCopy[i].length; j+=8){ //skip over an entire row each time
            //get 8 cell indices
            var cellCluster = [];
            for (var k = 0; k < 8; k++){ //read the row into the cell cluster
                // hexDataCounter += 1;
                cellCluster.push(spritesCopy[i][j + k]);
            }

            var leftHalfBinary = [];
            var rightHalfBinary = [];
            for (var k = 0; k < cellCluster.length; k++){
                if (cellCluster[k] === '0'){
                    leftHalfBinary.push('0');
                    rightHalfBinary.push('0');
                }
                else if (cellCluster[k] === '1'){
                    leftHalfBinary.push('1');
                    rightHalfBinary.push('0');
                }
                else if (cellCluster[k] === '2'){
                    leftHalfBinary.push('0');
                    rightHalfBinary.push('1');
                }
                else if (cellCluster[k] === '3'){
                    leftHalfBinary.push('1');
                    rightHalfBinary.push('1');
                }
            }

            //obtain string versions of the binary arrays
            leftHalfBinary = leftHalfBinary.join('');
            rightHalfBinary = rightHalfBinary.join('');

            //obtain an integer value from the binary
            leftHalfDec = parseInt(leftHalfBinary, 2);
            rightHalfDec = parseInt(rightHalfBinary, 2);

            //obtain string hex values from the integer values
            leftHalfHex = leftHalfDec.toString(16);
            rightHalfHex = rightHalfDec.toString(16);

            //pad the hex values if there is only one digit
            if (leftHalfHex.length < 2){
                leftHalfHex = '0' + leftHalfHex;
            }
            if (rightHalfHex.length < 2){
                rightHalfHex = '0' + rightHalfHex;
            }

            hexData[hexDataCounter] = leftHalfHex;
            hexData[hexDataCounter + 8] = rightHalfHex;

            if (rowCounter === 7){
                hexDataCounter += 9;
                rowCounter = 0;
            }
            else{
                hexDataCounter += 1;
                rowCounter += 1;
            }
        }
    }

    hexData = hexData.join('');
    var dataToWrite = Buffer.from(hexData, 'hex');

    fs.writeFile('./projects/' + checkedOutProjectName + '/sprite.spr', dataToWrite, function(err){
        cb("retval");
    });
}

function transcribeBkgServerToClient(cb){
    fs.readFile('./projects/' + checkedOutProjectName + '/background.bkg', {encoding: 'hex'}, function(err, data){
        var backgroundArray = data.match(/.{1,32}/g);
        var backgrounds = [];
        
        //create 256 sub arrays for the sprite tiles
        for (var i = 0; i < 256; i++){
            backgrounds.push(new Array());
        }

        for (var i = 0; i < backgroundArray.length; i++){
            for (var j = 0; j < backgroundArray[i].length / 2; j += 2){
                //set 1st half with 2nd half respective data
                var leftHalf = backgroundArray[i].substring(j, j + 2);
                var rightHalf = backgroundArray[i].substring(j + 16, j + 16 + 2);

                //convert hex strings to binary
                var leftHalfBinary = ("00000000" + (parseInt(leftHalf, 16)).toString(2)).substr(-8);
                var rightHalfBinary = ("00000000" + (parseInt(rightHalf, 16)).toString(2)).substr(-8);

                //compare binary bits and generate color numbers
                for (var k = 0; k < leftHalfBinary.length; k++){
                    if (leftHalfBinary[k] === '0' && rightHalfBinary[k] === '0'){
                        backgrounds[i % 256].push('0');
                    }
                    else if (leftHalfBinary[k] === '1' && rightHalfBinary[k] === '0'){
                        backgrounds[i % 256].push('1');
                    }
                    else if (leftHalfBinary[k] === '0' && rightHalfBinary[k] === '1'){
                        backgrounds[i % 256].push('2');
                    }
                    else if (leftHalfBinary[k] === '1' && rightHalfBinary[k] === '1'){
                        backgrounds[i % 256].push('3');
                    }
                }
            }
        }
        cb({backgrounds: backgrounds});
    });
}

function transcribeBkgClientToServer(cb){
    var backgroundsCopy = savedata.backgrounds;

    var hexData = new Array(4096);
    var hexDataCounter = 0;
    var rowCounter = 0;
    for (var i = 0; i < backgroundsCopy.length; i++){ //read each tile once
        for (var j = 0; j < backgroundsCopy[i].length; j+=8){ //skip over an entire row each time
            //get 8 cell indices
            var cellCluster = [];
            for (var k = 0; k < 8; k++){ //read the row into the cell cluster
                // hexDataCounter += 1;
                cellCluster.push(backgroundsCopy[i][j + k]);
            }

            var leftHalfBinary = [];
            var rightHalfBinary = [];
            for (var k = 0; k < cellCluster.length; k++){
                if (cellCluster[k] === '0'){
                    leftHalfBinary.push('0');
                    rightHalfBinary.push('0');
                }
                else if (cellCluster[k] === '1'){
                    leftHalfBinary.push('1');
                    rightHalfBinary.push('0');
                }
                else if (cellCluster[k] === '2'){
                    leftHalfBinary.push('0');
                    rightHalfBinary.push('1');
                }
                else if (cellCluster[k] === '3'){
                    leftHalfBinary.push('1');
                    rightHalfBinary.push('1');
                }
            }

            //obtain string versions of the binary arrays
            leftHalfBinary = leftHalfBinary.join('');
            rightHalfBinary = rightHalfBinary.join('');

            //obtain an integer value from the binary
            leftHalfDec = parseInt(leftHalfBinary, 2);
            rightHalfDec = parseInt(rightHalfBinary, 2);

            //obtain string hex values from the integer values
            leftHalfHex = leftHalfDec.toString(16);
            rightHalfHex = rightHalfDec.toString(16);

            //pad the hex values if there is only one digit
            if (leftHalfHex.length < 2){
                leftHalfHex = '0' + leftHalfHex;
            }
            if (rightHalfHex.length < 2){
                rightHalfHex = '0' + rightHalfHex;
            }

            hexData[hexDataCounter] = leftHalfHex;
            hexData[hexDataCounter + 8] = rightHalfHex;

            if (rowCounter === 7){
                hexDataCounter += 9;
                rowCounter = 0;
            }
            else{
                hexDataCounter += 1;
                rowCounter += 1;
            }
        }
    }

    hexData = hexData.join('');
    var dataToWrite = Buffer.from(hexData, 'hex');

    fs.writeFile('./projects/' + checkedOutProjectName + '/background.bkg', dataToWrite, function(err){
        cb("retval");
    });
}

function transcribeTxtServerToClient(cb){
    fs.readFile('./projects/' + checkedOutProjectName + '/code.s', {encoding: 'utf8'}, function(err, data){
        var code = {code: data};
        cb(code);
    });
}

function transcribeTxtClientToServer(cb){
    fs.writeFile('./projects/' + checkedOutProjectName + '/code.s', savedata.code, function(err){
        cb("retval");
    });
}

function transcribeSprPalPairsServerToClient(cb){
    fs.readFile('./projects/' + checkedOutProjectName + '/spritePalettePairs.txt', {encoding: 'utf8'}, function(err, data){
        var pairs = {sprPalPairs: data};
        cb(pairs);
    });
}

function transcribeSprPalPairsClientToServer(cb){
    fs.writeFile('./projects/' + checkedOutProjectName + '/spritePalettePairs.txt', savedata.sprPalPairs, function(err){
        cb("retval");
    });
}

function transcribeBkgPalPairsServerToClient(cb){
    fs.readFile('./projects/' + checkedOutProjectName + '/backgroundPalettePairs.txt', {encoding: 'utf8'}, function(err, data){
        var pairs = {bkgPalPairs: data};
        cb(pairs);
    });
}

function transcribeBkgPalPairsClientToServer(cb){
    fs.writeFile('./projects/' + checkedOutProjectName + '/backgroundPalettePairs.txt', savedata.bkgPalPairs, function(err){
        cb("retval");
    });
}